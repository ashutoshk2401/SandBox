import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class TWODOGS {
	public static void main(String args[]) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n, k;
		String s[] = br.readLine().trim().split(" ", -1);
		n = Integer.parseInt(s[0]);
		k = Integer.parseInt(s[1]);
		int[] a = new int[n];
		String s1[] = br.readLine().trim().split(" ", -1);
		for (int i = 0; i < n; ++i) {
			a[i] = Integer.parseInt(s1[i]);
		}
		System.out.println(Math.min(Math.min(bothleft(a, k), bothright(a, k)),
				leftright(a, k)));
	}

	public static int bothleft(int a[], int k) {
		int count1 = 1, count2 = 2;
		for (int i = 0; i < a.length - 1; i++) {
			for (int j = i + 1; j < a.length; ++j) {
				if (a[i] + a[j] == k && a[i] != a[j])
					return Math.max(count1, count2);
				count1++;
			}
			count1 = 1;
			count2++;
		}
		return -1;

	}

	public static int bothright(int a[], int k) {
		int count1 = 1, count2 = 2;
		for (int i = a.length - 1; i > 0; i--) {
			for (int j = i - 1; j >= 0; --j) {
				if (a[i] + a[j] == k && a[i] != a[j])
					return Math.max(count1, count2);
				count1++;
			}
			count1 = 1;
			count2++;
		}
		return -1;
	}

	public static int leftright(int a[], int k) {
		int count1 = 1, count2 = 1;
		int leftright = -1;
		int rightleft = -1;
		int mincount = -1;
		for (int i = 0; i < a.length - 1; i++) {
			for (int j = a.length - 1; j > 0; --j) {
				if (a[i] + a[j] == k && a[i] != a[j])
					leftright = Math.max(count1, count2);
				count1++;
			}
			count2++;
			count1 = 1;
		}
		count1 = 1;
		leftrightcount2 = 1;
		for (int i = a.length - 1; i > 0; i--) {
			for (int j = 0; j < a.length - 1; j++) {
				if (a[i] + a[j] == k && a[i] != a[j])
					rightleft = Math.max(count1, count2);
				count1++;
			}
			count2++;
			count1 = 1;
		}
		mincount = Math.min(leftright, rightleft);
		return mincount;
	}
}
